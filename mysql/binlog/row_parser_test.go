package binlog

import (
	"bytes"
	"log"
	"os"
	"reflect"
	"testing"
)

func getParser(t *testing.T) *BinlogParser {
	if false {
		os.Stdout = os.NewFile(3, "/dev/null")
		log.SetOutput(&bytes.Buffer{})
	}
	p := &BinlogParser{}
	p.TableMaps = map[uint64]*BinlogEventTableMap{}

	// format description.
	packet := []byte{0xbb, 0x11, 0xc5, 0x57, 0xf, 0x1, 0x0, 0x0, 0x0, 0x77, 0x0, 0x0, 0x0, 0x7b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x35, 0x2e, 0x37, 0x2e, 0x31, 0x34, 0x2d, 0x6c, 0x6f, 0x67, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13, 0x38, 0xd, 0x0, 0x8, 0x0, 0x12, 0x0, 0x4, 0x4, 0x4, 0x4, 0x12, 0x0, 0x0, 0x5f, 0x0, 0x4, 0x1a, 0x8, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x2, 0x0, 0x0, 0x0, 0xa, 0xa, 0xa, 0x2a, 0x2a, 0x0, 0x12, 0x34, 0x0, 0x0, 0x1c, 0x4e, 0x6, 0xf8}
	_, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Fatal(err)
	}
	return p
}

func TestDecimal(t *testing.T) {
	p := getParser(t)

	var packet []byte
	packet = []byte{0x9a, 0x52, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0xe0, 0x15, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x9a, 0x52, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x24, 0x16, 0x0, 0x0, 0x8, 0x0, 0x53, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x9a, 0x52, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x2e, 0x0, 0x0, 0x0, 0x52, 0x16, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x5, 0x74, 0x65, 0x73, 0x74, 0x32, 0x0, 0x1, 0xf6, 0x2, 0x8, 0x2, 0x1}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x9a, 0x52, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x24, 0x0, 0x0, 0x0, 0x76, 0x16, 0x0, 0x0, 0x0, 0x0, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x1, 0xff, 0xfe, 0x80, 0xb, 0xd8, 0x31}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}
	if ev.Rows.Rows[0].Columns[0].String() != "3032.49" {
		t.Errorf("invalid decimal: %s", ev.Rows.Rows[0].Columns[0].String())
	}

}

func TestVarchar(t *testing.T) {
	p := getParser(t)

	packet := []byte{0x57, 0x57, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x89, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x57, 0x57, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0xcd, 0x1, 0x0, 0x0, 0x8, 0x0, 0x53, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x57, 0x57, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x2f, 0x0, 0x0, 0x0, 0xfc, 0x1, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x3, 0x73, 0x74, 0x72, 0x0, 0x2, 0xf, 0xf, 0x4, 0x78, 0x0, 0x0, 0x6, 0x3}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x57, 0x57, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x35, 0x0, 0x0, 0x0, 0x31, 0x2, 0x0, 0x0, 0x0, 0x0, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x2, 0xff, 0xfc, 0x8, 0x73, 0x74, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0xa, 0x0, 0x73, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x6e, 0x67}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}
	if ev.Rows.Rows[0].Columns[0].String() != "str test" {
		t.Errorf("invalid varchar: %s", ev.Rows.Rows[0].Columns[0].String())
	}
	if ev.Rows.Rows[0].Columns[1].String() != "slong long" {
		t.Errorf("invalid varchar: %s", ev.Rows.Rows[0].Columns[1].String())
	}

}

func TestCharFloatDatetime(t *testing.T) {
	p := getParser(t)

	packet := []byte{0x82, 0x59, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x60, 0x3, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x82, 0x59, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0xa4, 0x3, 0x0, 0x0, 0x8, 0x0, 0x53, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x82, 0x59, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x31, 0x0, 0x0, 0x0, 0xd5, 0x3, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x3, 0x65, 0x78, 0x70, 0x0, 0x4, 0x8, 0xfe, 0x4, 0x12, 0x4, 0xfe, 0x3c, 0x4, 0x0, 0xf}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x82, 0x59, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x3b, 0x0, 0x0, 0x0, 0x10, 0x4, 0x0, 0x0, 0x0, 0x0, 0x71, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0xff, 0xf0, 0xf2, 0xe1, 0xf2, 0xbb, 0x1c, 0x0, 0x0, 0x0, 0x9, 0x63, 0x68, 0x61, 0x72, 0x20, 0x68, 0x6f, 0x67, 0x65, 0x2c, 0x9f, 0x36, 0x45, 0x99, 0x8a, 0x97, 0x7b, 0x16}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row := ev.Rows.Rows[0]
	if row.Columns[0].String() != "123412341234" {
		t.Errorf("invalid bigint: %s", row.Columns[0].String())
	}
	if row.Columns[1].String() != "char hoge" {
		t.Errorf("invalid char: %s", row.Columns[1].String())
	}
	if row.Columns[2].String() != "2921.948242" {
		t.Errorf("invalid float: %f", row.Columns[2].String())
	}
	if row.Columns[3].String() != "2011-11-11 23:44:22" {
		t.Errorf("invalid datetime: %s", row.Columns[3].String())
	}
}

/*
CREATE TABLE `exp2` (
  `yr` year(4) DEFAULT NULL,
  `tm` time DEFAULT NULL,
  `dt` date DEFAULT NULL,
  `ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into exp2 (yr, tm, dt, ts) values (2012, '12:34:56', '2015-08-30', '2014-11-22 11:22:33');
*/
func TestDatetimes(t *testing.T) {
	p := getParser(t)

	packet := []byte{0x71, 0x8c, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0x2f, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x71, 0x8c, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x4c, 0x0, 0x0, 0x0, 0x7b, 0x6, 0x0, 0x0, 0x8, 0x0, 0x53, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x22, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x5, 0x6, 0x2b, 0x30, 0x39, 0x3a, 0x30, 0x30, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x71, 0x8c, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0xab, 0x6, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x4, 0x65, 0x78, 0x70, 0x32, 0x0, 0x4, 0xd, 0x13, 0xa, 0x11, 0x2, 0x0, 0x0, 0x7}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x71, 0x8c, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0xd6, 0x6, 0x0, 0x0, 0x0, 0x0, 0x72, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0xff, 0xf0, 0x70, 0x80, 0xc8, 0xb8, 0x1e, 0xbf, 0xf, 0x54, 0x6f, 0xf3, 0x69}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row := ev.Rows.Rows[0]
	if row.Columns[0].String() != "2012" {
		t.Errorf("invalid year: %s", row.Columns[0].String())
	}
	if row.Columns[1].String() != "12:34:56" {
		t.Errorf("invalid time: %s", row.Columns[1].String())
	}
	if row.Columns[2].String() != "2015-08-30" {
		t.Errorf("invalid date: %f", row.Columns[2].String())
	}
	if row.Columns[3].String() != "2014-11-22 02:22:33" {
		t.Errorf("invalid timestamp: %s", row.Columns[3].String())
	}
}

/*
CREATE TABLE `blobs` (
  `nb` blob,
  `tb` tinyblob,
  `mb` mediumblob,
  `lb` longblob
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into blobs values(0x2233, 0x1839292729203, 0x92200983902, 0x8281181992);
*/
func TestBlobs(t *testing.T) {
	p := getParser(t)

	packet := []byte{0x8f, 0xa4, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0xf5, 0x7, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x8f, 0xa4, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x39, 0x8, 0x0, 0x0, 0x8, 0x0, 0x64, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x8f, 0xa4, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x33, 0x0, 0x0, 0x0, 0x6c, 0x8, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x5, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x0, 0x4, 0xfc, 0xfc, 0xfc, 0xfc, 0x4, 0x2, 0x1, 0x3, 0x4, 0xf}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0x8f, 0xa4, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x3e, 0x0, 0x0, 0x0, 0xaa, 0x8, 0x0, 0x0, 0x0, 0x0, 0x73, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x4, 0xff, 0xf0, 0x2, 0x0, 0x22, 0x33, 0x7, 0x1, 0x83, 0x92, 0x92, 0x72, 0x92, 0x3, 0x6, 0x0, 0x0, 0x9, 0x22, 0x0, 0x98, 0x39, 0x2, 0x5, 0x0, 0x0, 0x0, 0x82, 0x81, 0x18, 0x19, 0x92}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row := ev.Rows.Rows[0]
	if !reflect.DeepEqual(row.Columns[0].Bytes(), []byte{0x22, 0x33}) {
		t.Errorf("invalid blob: %#v", row.Columns[0].Bytes())
	}
	if !reflect.DeepEqual(row.Columns[1].Bytes(), []byte{0x1, 0x83, 0x92, 0x92, 0x72, 0x92, 0x03}) {
		t.Errorf("invalid tinyblob: %#v", row.Columns[1].Bytes())
	}
	if !reflect.DeepEqual(row.Columns[2].Bytes(), []byte{0x9, 0x22, 0x00, 0x98, 0x39, 0x02}) {
		t.Errorf("invalid mediumblob: %#v", row.Columns[2].Bytes())
	}
	if !reflect.DeepEqual(row.Columns[3].Bytes(), []byte{0x82, 0x81, 0x18, 0x19, 0x92}) {
		t.Errorf("invalid longblob: %#v", row.Columns[3].Bytes())
	}
}

func TestBitEnumSet(t *testing.T) {
	p := getParser(t)

	packet := []byte{0xd1, 0xa7, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0xea, 0x9, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xd1, 0xa7, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x2e, 0xa, 0x0, 0x0, 0x8, 0x0, 0x64, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xd1, 0xa7, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x39, 0x0, 0x0, 0x0, 0x67, 0xa, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0xa, 0x62, 0x69, 0x74, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x65, 0x74, 0x0, 0x3, 0x10, 0xfe, 0xfe, 0x6, 0x3, 0x4, 0xf7, 0x1, 0xf8, 0x1, 0x7}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xd1, 0xa7, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x27, 0x0, 0x0, 0x0, 0x8e, 0xa, 0x0, 0x0, 0x0, 0x0, 0x74, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x3, 0xff, 0xf8, 0x0, 0x0, 0x0, 0x0, 0x23, 0x2, 0x5}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row := ev.Rows.Rows[0]
	if !reflect.DeepEqual(row.Columns[0].Bytes(), []byte{0x00, 0x00, 0x00, 0x00, 0x23}) {
		t.Errorf("invalid bit: %#v", row.Columns[0].Bytes())
	}
	if !reflect.DeepEqual(row.Columns[1].Bytes(), []byte{0x02}) {
		t.Errorf("invalid enum: %#v", row.Columns[1].Bytes())
	}
	if !reflect.DeepEqual(row.Columns[2].Bytes(), []byte{0x05}) {
		t.Errorf("invalid set: %#v", row.Columns[2].Bytes())
	}
}

/*
CREATE TABLE `blobs` (
  `nb` blob,
  `tb` tinyblob,
  `mb` mediumblob,
  `lb` longblob
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into nums values(100, 1200, 300, 55, 1039292, 9482892450);
insert into nums values(-100, -1200, -300, -55, -1039292, -9482892450);
*/
func TestNumbers(t *testing.T) {
	p := getParser(t)

	packet := []byte{0xa6, 0xab, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0xc1, 0xb, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err := p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xa6, 0xab, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x5, 0xc, 0x0, 0x0, 0x8, 0x0, 0x64, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xa6, 0xab, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x35, 0xc, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x4, 0x6e, 0x75, 0x6d, 0x73, 0x0, 0x6, 0x3, 0x3, 0x2, 0x1, 0x9, 0x8, 0x0, 0x3f}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	packet = []byte{0xa6, 0xab, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x36, 0x0, 0x0, 0x0, 0x6b, 0xc, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x6, 0xff, 0xc0, 0x64, 0x0, 0x0, 0x0, 0xb0, 0x4, 0x0, 0x0, 0x2c, 0x1, 0x37, 0xbc, 0xdb, 0xf, 0xa2, 0x74, 0x39, 0x35, 0x2, 0x0, 0x0, 0x0}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row := ev.Rows.Rows[0]
	if row.Columns[0].Int() != 100 {
		t.Errorf("invalid int: %d", row.Columns[0].Int())
	}
	if row.Columns[1].Int() != 1200 {
		t.Errorf("invalid integer: %d", row.Columns[1].Int())
	}
	if row.Columns[2].Int() != 300 {
		t.Errorf("invalid smallint: %d", row.Columns[2].Int())
	}
	if row.Columns[3].Int() != 55 {
		t.Errorf("invalid tinyint: %d", row.Columns[3].Int())
	}
	if row.Columns[4].Int() != 1039292 {
		t.Errorf("invalid mediumint: %d", row.Columns[3].Int())
	}
	if row.Columns[5].Int() != 9482892450 {
		t.Errorf("invalid bigint: %d", row.Columns[3].Int())
	}

	packet = []byte{0x9c, 0xb4, 0xc6, 0x57, 0x22, 0x1, 0x0, 0x0, 0x0, 0x3d, 0x0, 0x0, 0x0, 0xc3, 0xc, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}
	packet = []byte{0x9c, 0xb4, 0xc6, 0x57, 0x2, 0x1, 0x0, 0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x7, 0xd, 0x0, 0x0, 0x8, 0x0, 0x64, 0x36, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x1a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x20, 0x0, 0xa0, 0x55, 0x0, 0x0, 0x0, 0x0, 0x6, 0x3, 0x73, 0x74, 0x64, 0x4, 0x21, 0x0, 0x21, 0x0, 0x8, 0x0, 0x74, 0x65, 0x73, 0x74, 0x0, 0x42, 0x45, 0x47, 0x49, 0x4e}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}
	packet = []byte{0x9c, 0xb4, 0xc6, 0x57, 0x13, 0x1, 0x0, 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x37, 0xd, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0x0, 0x4, 0x6e, 0x75, 0x6d, 0x73, 0x0, 0x6, 0x3, 0x3, 0x2, 0x1, 0x9, 0x8, 0x0, 0x3f}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}
	packet = []byte{0x9c, 0xb4, 0xc6, 0x57, 0x1e, 0x1, 0x0, 0x0, 0x0, 0x36, 0x0, 0x0, 0x0, 0x6d, 0xd, 0x0, 0x0, 0x0, 0x0, 0x76, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x2, 0x0, 0x6, 0xff, 0xc0, 0x9c, 0xff, 0xff, 0xff, 0x50, 0xfb, 0xff, 0xff, 0xd4, 0xfe, 0xc9, 0x44, 0x24, 0xf0, 0x5e, 0x8b, 0xc6, 0xca, 0xfd, 0xff, 0xff, 0xff}
	ev, _, err = p.ParseBinlogEvent(packet)
	if err != nil {
		t.Error(err)
	}

	row = ev.Rows.Rows[0]
	if row.Columns[0].Int() != -100 {
		t.Errorf("invalid int: %d", row.Columns[0].Int())
	}
	if row.Columns[1].Int() != -1200 {
		t.Errorf("invalid integer: %d", row.Columns[1].Int())
	}
	if row.Columns[2].Int() != -300 {
		t.Errorf("invalid smallint: %d", row.Columns[2].Int())
	}
	if row.Columns[3].Int() != -55 {
		t.Errorf("invalid tinyint: %d", row.Columns[3].Int())
	}
	if row.Columns[4].Int() != -1039292 {
		t.Errorf("invalid mediumint: %d", row.Columns[4].Int())
	}
	if row.Columns[5].Int() != -9482892450 {
		t.Errorf("invalid bigint: %d", row.Columns[5].Int())
	}

}
